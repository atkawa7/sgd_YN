//The following variables is applied to Persian calendar convertion
var JULIAN_EPOCH_MILLIS = -210866803200000;
var ONE_DAY_MILLIS = 24 * 60* 60 * 1000;
var EPOCH = 1948321;

/**********************************************************
函数名称：toCountryCalendar
函数说明：将公历转换为相应国家的日历
传入参数：datetimeValue:需要进行转换的公历日期值

返回：转换后的日历值

***********************************************************/
function toCountryCalendar(datetimeValue,dateFormatValue)
{
	var dateFormat =(dateFormatValue==null)? g_GlobalInfo.DateFormat:dateFormatValue;
	if(String.interpret(datetimeValue).trim()=="") {
		return "";
	}
	else {
		if(datetimeValue.length>19)
			return dateHelper.toDispalyFormat(datetimeValue.substring(0,19),dateFormat);
		else
			return dateHelper.toDispalyFormat(datetimeValue,dateFormat);
	}
}

/**********************************************************
函数名称：getCalendarMap
函数说明：返回地区的日历对照表

传入参数：locale:地区名称
返回：返回相应的日历对照表

***********************************************************/
function getCalendarMap(locale)
{
	locale = String.interpret(locale).toUpperCase();
	switch(locale)
	{
		case "":
		case "GEGORIAN"://公历
			return new Array("2004-12-16-31","2005-01-14-31","2005-02-12-28","2005-03-14-31",
					"2005-04-14-30","2005-05-14-31","2005-06-15-30","2005-07-16-31","2005-08-17-31","2005-09-17-30",
					"2005-10-18-31","2005-11-16-30","2005-12-16-31","2006-01-14-31","2006-02-13-28","2006-03-14-31",
					"2006-04-14-30","2006-05-15-31","2006-06-15-30","2006-07-17-31","2006-08-17-31","2006-09-17-30",
					"2006-10-18-31","2006-11-17-30","2006-12-16-31","2007-01-15-31","2007-02-13-28","2007-03-15-31",
					"2007-04-14-30","2007-05-15-31","2007-06-15-30","2007-07-17-31","2007-08-18-31","2007-09-18-30",
					"2007-10-18-31","2007-11-17-30","2007-12-16-31","2008-01-15-31","2008-02-13-29","2008-03-14-31",
					"2008-04-13-30","2008-05-14-31","2008-06-15-30","2008-07-16-31","2008-08-17-31","2008-09-17-30",
					"2008-10-17-31","2008-11-16-30","2008-12-16-31","2009-01-14-31","2009-02-12-28","2009-03-14-31",
					"2009-04-14-30","2009-05-15-31","2009-06-15-30","2009-07-16-31","2009-08-17-31","2009-09-17-30",
					"2009-10-18-31","2009-11-16-30","2009-12-16-31","2010-01-15-31","2010-02-13-28","2010-03-14-31",
					"2010-04-14-30","2010-05-15-31","2010-06-15-30","2010-07-17-31","2010-08-17-31","2010-09-17-30",
					"2010-10-18-31","2010-11-17-30","2010-12-16-31","2011-01-15-31","2011-02-13-28","2011-03-15-31",
					"2011-04-14-30","2011-05-15-31","2011-06-15-30","2011-07-17-31","2011-08-18-31","2011-09-18-30",
					"2011-10-18-31","2011-11-17-30","2011-12-16-31","2012-01-15-31","2012-02-13-29","2012-03-14-31",
					"2012-04-13-30","2012-05-14-31","2012-06-15-30","2012-07-16-31","2012-08-17-31","2012-09-17-30",
					"2012-10-17-31","2012-11-16-30","2012-12-16-31","2013-01-14-31","2013-02-12-28","2013-03-14-31",
					"2013-04-14-30","2013-05-15-31","2013-06-15-30","2013-07-16-31","2013-08-17-31","2013-09-17-30",
					"2013-10-18-31","2013-11-16-30","2013-12-16-31","2014-01-15-31","2014-02-13-28","2014-03-15-31",
					"2014-04-14-30","2014-05-15-31","2014-06-15-30","2014-07-17-31","2014-08-17-31","2014-09-17-30",
					"2014-10-18-31","2014-11-17-30","2014-12-16-31","2015-01-15-31","2015-02-13-28","2015-03-15-31",
					"2015-04-14-30","2015-05-15-31","2015-06-16-30","2015-07-17-31","2015-08-18-31","2015-09-18-30",
					"2015-10-18-31","2015-11-17-30","2015-12-16-31","2016-01-14-31");
		case "NEPAL"://尼泊尔历
			return new Array("2061-09-4-29","2061-10-5-29","2061-11-6-30","2061-12-1-31",
					"2062-01-4-30","2062-02-6-32","2062-03-3-31","2062-04-6-32","2062-05-3-31","2062-06-6-31",
					"2062-07-2-29","2062-08-3-30","2062-09-5-29","2062-10-6-30","2062-11-1-29","2062-12-2-31",
					"2063-01-5-31","2063-02-1-31","2063-03-4-32","2063-04-1-31","2063-05-4-31","2063-06-7-31",
					"2063-07-3-30","2063-08-5-29","2063-09-6-30","2063-10-1-29","2063-11-2-30","2063-12-4-30",
					"2064-01-6-31","2064-02-2-31","2064-03-5-32","2064-04-2-32","2064-05-6-31","2064-06-2-30",
					"2064-07-4-30","2064-08-6-29","2064-09-7-30","2064-10-2-29","2064-11-3-30","2064-12-5-30",
					"2065-01-7-31","2065-02-3-32","2065-03-7-31","2065-04-3-32","2065-05-7-31","2065-06-3-30",
					"2065-07-5-30","2065-08-7-30","2065-09-2-29","2065-10-3-29","2065-11-4-30","2065-12-6-31",
					"2066-01-2-31","2066-02-5-31","2066-03-1-31","2066-04-4-32","2066-05-1-31","2066-06-4-31",
					"2066-07-7-29","2066-08-1-30","2066-09-3-30","2066-10-5-29","2066-11-6-29","2066-12-7-31",
					"2067-01-3-31","2067-02-6-31","2067-03-2-32","2067-04-6-31","2067-05-2-31","2067-06-5-31",
					"2067-07-1-30","2067-08-3-29","2067-09-4-30","2067-10-6-29","2067-11-7-30","2067-12-2-30",
					"2068-01-4-31","2068-02-7-31","2068-03-3-32","2068-04-7-32","2068-05-4-31","2068-06-7-30",
					"2068-07-2-30","2068-08-4-29","2068-09-5-30","2068-10-7-29","2068-11-1-30","2068-12-3-30",
					"2069-01-5-31","2069-02-1-32","2069-03-5-31","2069-04-1-32","2069-05-5-31","2069-06-1-30",
					"2069-07-3-30","2069-08-5-30","2069-09-7-29","2069-10-1-29","2069-11-2-30","2069-12-4-31",
					"2070-01-7-31","2070-02-3-31","2070-03-6-31","2070-04-2-32","2070-05-6-31","2070-06-2-31",
					"2070-07-5-29","2070-08-6-30","2070-09-1-30","2070-10-3-29","2070-11-4-30","2070-12-6-30",
					"2071-01-1-31","2071-02-4-31","2071-03-7-32","2071-04-4-31","2071-05-7-31","2071-06-3-31",
					"2071-07-6-30","2071-08-1-29","2071-09-2-30","2071-10-4-29","2071-11-5-30","2071-12-7-30",
					"2072-01-2-31","2072-02-5-32","2072-03-2-31","2072-04-5-32","2072-05-2-31","2072-06-5-30",
					"2072-07-7-30","2072-08-2-29","2072-09-3-31");
		default:
			return null;
	}
}

/**********************************************************
函数名称：nepalEnglish
函数说明：转换成尼历的英文

传入参数：str
返回：

***********************************************************/
function nepalEnglish(month)
{
	month=parseInt(month,10);
	switch(month)
	{
		case 1:	    return "Baisakh";break;
		case 2:	    return "Jestha";break;
		case 3:	    return "Asadh";break;
		case 4:	    return "Shrawan";break;
		case 5:	    return "Bhadra";break;
		case 6:	    return "Ashwin";break;
		case 7:	    return "Kartik";break;
		case 8:	    return "Mangsir";break;
		case 9:	    return "Poush";break;
		case 10:	return "Magh";break;
		case 11:	return "Falgun";break;
		case 12:	return "Chaitra";break;
		default :   return "";break;
	}
}
/**********************************************************
函数名称：getPersianDay
函数说明：根据输入的日期获得Persia日期值

传入参数：year,month,day
返回：转换后的日历值

***********************************************************/
function getPersianDay(year,month,day)
{
	var julianDay = getJulianDay(year,month,day);
	var r = jp(julianDay);
	var y1 = y(r);
	var m1 = m(r);
	var d1 = d(r);
	y1 = y1 > 0?y1:y1-1;
	var persiaDate = new Object();
	persiaDate.year  = y1;
	persiaDate.month = m1;
	persiaDate.day = d1;
	return persiaDate;
}

/**********************************************************
函数名称：getJulianDay
函数说明：根据输入的日期获得公历日期值

传入参数：year,month,day
返回：转换后的日历值

***********************************************************/
function getJulianDay(year,month,day)
{
	return div(new Date(year,month,day,8,1,1) - JULIAN_EPOCH_MILLIS, ONE_DAY_MILLIS);
}

/**********************************************************
函数名称：setJulianDay
函数说明：根据输入的日期获得公历日期值

传入参数：julianDay
返回：转换后的日历值

***********************************************************/
function setJulianDay(julianDay)
{
	var current = new Date();
	var year = current.getFullYear();
	var month = current.getMonth()+1;
	var day = current.getDate();

	var datetimevalue = JULIAN_EPOCH_MILLIS + julianDay * ONE_DAY_MILLIS + mod(new Date(year,month,day,8,1,1) - JULIAN_EPOCH_MILLIS, ONE_DAY_MILLIS);
	current = new Date(datetimevalue);
	var julianDate = new Object();
	julianDate.year  = current.getFullYear();
	julianDate.month = eval(current.getMonth()+1);
	julianDate.day = current.getDate();
	return julianDate;
}

/**********************************************************
函数名称：jp
函数说明：公历转换为波斯历

传入参数：julianDay
返回：转换后的日历值

***********************************************************/
function jp(j)
{
	var a = j - pj(475, 0, 1);
	var b = div(a, 1029983);
	var c = mod(a, 1029983);
	var d = c != 1029982? div(2816 * c + 1031337, 1028522): 2820;
	var year = 474 + 2820 * b + d;
	var f = (1 + j) - pj(year, 0, 1);
	var month = f > 186? Math.ceil((f - 6) / 30) - 1: Math.ceil(f / 31) - 1;
	var day = j - (pj(year, month, 1) - 1);
	return (year << 16) | (month << 8) | day;
}

/**********************************************************
函数名称：pj
函数说明：波斯历转换为公历

传入参数：y,m,d
返回：转换后的日历值

***********************************************************/
function pj(y, m, d)
{
	var a = y - 474;
	var b = mod(a, 2820) + 474;
	return (EPOCH - 1) + 1029983 * div(a, 2820) + 365 * (b - 1) + div(682 * b - 110, 2816) + (m > 6? 30 * m + 6: 31 * m) + d;
}

function div(a,b)
{
	return Math.floor(a / b);
}

function mod(a,b)
{
	return (a - b * Math.floor(a / b));
}

function y(r)
{
	return r>>16;
}

function m(r)
{
	return (r & 0xff00) >> 8;
}

function d(r)
{
	return (r & 0xff);
}
 
//////////////////////////////////////////////////////////////////////////////////////////

/**  The Format class references to java.text.SimpleFormat of J2SE1.4 */
DateFormat.language = g_GlobalInfo.Language.toLowerCase();
if(DateFormat.language!="zh_cn")
{
	DateFormat.language="us_en"
}